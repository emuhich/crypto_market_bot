from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hbold, hlink

from data.config import SUPPORT_LINK
from keyboards.inline.buy_products import back_to_product, check_payment
from keyboards.inline.callback_datas import buy_product_callback
from keyboards.inline.orders_keyboard import keyboard_my_orders
from keyboards.inline.profile import my_profile_keyboard
from loader import dp
from states import States
from utils.db_api.db_commands import get_product, select_client, create_order
from utils.misc.binance import Binance


@dp.callback_query_handler(buy_product_callback.filter(command_name="buy_product"))
async def buy_product(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.message.delete()
    await state.finish()
    pk = int(callback_data.get("pk"))
    quantity = int(callback_data.get("quantity"))
    pk_sub_categories = int(callback_data.get("pk_sub_categories"))
    user_id = call.message.chat.id
    user = await select_client(user_id)
    if not user.full_name or not user.address or not user.phone:
        await call.message.answer(
            text="\n".join(
                [
                    f'‚ùå {hbold(f"–û—à–∏–±–∫–∞")}\n',
                    f'–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:.',
                    f'- –§–ò–û',
                    f'- –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏',
                    f'- –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è\n',
                    f'–í—Å–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å.',

                ]
            ), reply_markup=my_profile_keyboard())
        return
    await call.message.answer(text="\n".join(
        [
            f'{hbold(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞")}\n',
            f'‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤—ã—à–µ –Ω—É–ª—è –∏ –Ω–µ –±–æ–ª—å—à–µ'
            f'—Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ - {quantity}',

        ]
    ), reply_markup=back_to_product(pk, pk_sub_categories))
    await States.QUANTITY_PRODUCTS.set()
    await state.update_data(quantity=quantity)
    await state.update_data(pk=pk)
    await state.update_data(pk_sub_categories=pk_sub_categories)


@dp.message_handler(state=States.QUANTITY_PRODUCTS)
async def get_binance_address(message: types.Message, state: FSMContext):
    await message.delete()
    data = await state.get_data()
    pk = data.get("pk")
    pk_sub_categories = data.get("pk_sub_categories")
    quantity = data.get("quantity")
    if not message.text.isdigit():
        await message.answer(text="\n".join(
            [
                f'{hbold(f"‚ùå –û—à–∏–±–∫–∞.")}\n',
                f'‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤—ã—à–µ –Ω—É–ª—è –∏ –Ω–µ –±–æ–ª—å—à–µ'
                f'—Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ - {quantity}\n',
                f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º',

            ]
        ), reply_markup=back_to_product(pk, pk_sub_categories))
        return
    elif int(message.text) <= 0 or int(message.text) > quantity:
        await message.answer(text="\n".join(
            [
                f'{hbold(f"‚ùå –û—à–∏–±–∫–∞.")}\n',
                f'‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤—ã—à–µ –Ω—É–ª—è –∏ –Ω–µ –±–æ–ª—å—à–µ'
                f'—Ç–æ–≤–∞—Ä–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ - {quantity}\n',
                f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º',

            ]
        ), reply_markup=back_to_product(pk, pk_sub_categories))
        return
    count = int(message.text)
    await state.finish()
    product = await get_product(pk)
    try:
        client = Binance()
        btc_address = await client.get_address_btc()
        eth_address = await client.get_address_eth()
        usd_address = await client.get_address_usd()
    except Exception:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∏–Ω–∞–Ω—Å,"
                             f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ {hlink('—Ç–µ—Ö—Ö –ø–æ–æ–¥–¥–µ—Ä–∂–∫—É', SUPPORT_LINK)}",
                             reply_markup=back_to_product(pk, pk_sub_categories))
        return
    await message.answer(
        text="\n".join(
            [
                f'{hbold(f"‚úÖ –û–ø–ª–∞—Ç–∞.")}\n',
                hbold("–ó–∞–∫–∞–∑: "),
                f'–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}',
                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} —à—Ç',
                f'–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {count * product.price} USDT\n',
                f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n',
                f'–°—É–º–º–∞ –≤ BTC: {count * product.price}',
                f'BTC –∫–æ—à–µ–ª–µ–∫: {btc_address}\n',
                f'–°—É–º–º–∞ –≤ ETH: {count * product.price}',
                f'ETH –∫–æ—à–µ–ª–µ–∫: {eth_address}\n',
                f'–°—É–º–º–∞ –≤ USDT: {count * product.price}',
                f'USDT –∫–æ—à–µ–ª–µ–∫: {usd_address}\n',
                f'–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂¬ª —Å –≤–∞–ª—é—Ç–æ–π –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –æ–ø–ª–∞—Ç–∏—Ç–ª–∏.'

            ]
        ), reply_markup=check_payment(pk, pk_sub_categories, count)
    )


@dp.callback_query_handler(buy_product_callback.filter(command_name="check_payment"))
async def buy_product(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await state.finish()
    pk = int(callback_data.get("pk"))
    quantity = int(callback_data.get("quantity"))
    pk_sub_categories = int(callback_data.get("pk_sub_categories"))
    telegram_id = call.message.chat.id
    await create_order(pk, telegram_id, quantity)
    await call.message.edit_text("\n".join(
        [
            f'{hbold(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")}\n',
            f'–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫–µ üõí –ú–æ–∏ –∑–∞–∫–∞–∑—ã',
            f'–¢–∞–∫ –∂–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.',

        ]
    ), reply_markup=keyboard_my_orders)
