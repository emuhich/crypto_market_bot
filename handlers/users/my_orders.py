from aiogram.types import CallbackQuery
from aiogram.utils.markdown import hbold

from handlers.users.tools import get_button_next_back
from keyboards.inline.callback_datas import my_order_callback, show_orders_callback
from keyboards.inline.catalog_keyboard import back_to_menu
from keyboards.inline.orders_keyboard import orders_keyboard, back_to_my_orders
from loader import dp
from utils.db_api.db_commands import get_orders_by_user_id, get_order


@dp.callback_query_handler(my_order_callback.filter(command_name="my_orders"))
async def show_my_orders(call: CallbackQuery, callback_data: dict):
    start = int(callback_data.get("start"))
    end = int(callback_data.get("end"))
    user_id = call.message.chat.id
    orders = await get_orders_by_user_id(user_id)
    if not orders:
        await call.message.edit_text(text="\n".join(
            [
                f'üõí {hbold(f"–ú–æ–∏ –∑–∞–∫–∞–∑—ã")}\n',
                f'–ö–∞–∂–µ—Ç—Å—è –º—ã –Ω–µ –Ω–∞—à–ª–∏ —É –≤–∞—Å –∑–∞–∫–∞–∑–æ–≤.',
                f'–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –∑–∞–∫–∞–∑ –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å.',

            ]
        ), reply_markup=back_to_menu())
        return
    next, back = await get_button_next_back(len(orders), end, start)
    orders = orders[start:end]
    await call.message.edit_text(text="\n".join(
        [
            f'üõí {hbold(f"–ú–æ–∏ –∑–∞–∫–∞–∑—ã")}\n',
            f'–°–Ω–∏–∑—É –∏—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤',
            f'–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫–∞–∑ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',

        ]
    ), reply_markup=orders_keyboard(start=start, end=end, next=next, back=back, orders=orders))


@dp.callback_query_handler(show_orders_callback.filter(command_name="show_orders"))
async def show_order(call: CallbackQuery, callback_data: dict):
    pk_orders = int(callback_data.get("pk_orders"))
    order = await get_order(pk_orders)
    if order.status == 'accepted':
        status = "–ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É"
    elif order.status == 'processed':
        status = "–æ–±—Ä–∞–±–æ—Ç–∞–Ω"
    elif order.status == 'in_delivery':
        status = "–ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É"
    else:
        status = "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
    date_order = order.created.strftime("%Y-%m-%d %H:%M:%S")
    change_date = order.updated.strftime("%Y-%m-%d %H:%M:%S")
    string = [
        f'üõí {hbold(f"–ú–æ–∏ –∑–∞–∫–∞–∑—ã")}\n',
        f'{hbold("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")} {order.product.name}',
        f'{hbold("–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É:")} {order.product.price} USDT',
        f'{hbold("–ê–¥–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")} {order.address}',
        f'{hbold("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:")} {order.quantity}',
        f'{hbold("–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:")} {order.price} USDT\n',
        f'{hbold("–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:")} {status}\n',
        f'{hbold("–î–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:")} {date_order}',

    ]
    if status == "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω":
        string.append(f'{hbold("–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:")} {change_date}', )
    else:
        string.append(f'{hbold("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:")} {change_date}', )
    await call.message.edit_text(text="\n".join(string), reply_markup=back_to_my_orders())
